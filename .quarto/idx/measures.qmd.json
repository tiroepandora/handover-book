{"title":"Measures","markdown":{"yaml":{"title":"Measures","format":"html"},"headingText":"BrandInterest & Category Interest in BigQuery and PowerBI","containsRefs":false,"markdown":"\nThis section outlines some some features i have created and it is useful to have some documentation for them.\n\n\nTo enhance performance and reliability, both BrandInterest and Category Interest calculations are now performed in BigQuery.\n\n### BrandInterest in BigQuery\n\nThere are two main views for BrandInterest in BigQuery:\n\n- **BrandInterestAGG**: The primary view containing all key metrics for all markets across the full date range.\n- **BrandInterestAGG_2**: A fallback view that always contains the latest complete week for each market (one row per market). This ensures that if a user selects a week with incomplete data, the dashboard will automatically display the latest available complete week for each market. If the selected week has complete data, the dashboard will show that week as expected. This approach avoids complex workarounds or heavy computations in PowerBI and ensures users always see the most relevant and complete data.\n\nThe same approach is applied to CategoryInterest data.\n\n- [BrandInterestAGG View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m5!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG&pli=1&inv=1&invt=Ab09Vg)\n- [BrandInterestAGG_2 View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG_2&pli=1&inv=1&invt=Ab09Vg&chat=true)\n- [CategoryInterestAGG View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sCategoryInterestAGG&pli=1&inv=1&invt=Ab09Vg&chat=true)\n- [CategoryInterestAGG_2 View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sCategoryInterestAGG_2&pli=1&inv=1&invt=Ab09Vg&chat=true)\n\nThese views are connected to PowerBI, allowing you to use simple measures directly in your visuals. The tables are linked to the master dates table using `Week_ForForFive` and to the market dimension using the market key.\n\nBelow is the SQL query for the **BrandInterestAGG** view, with explanations:\n\n\n```sql\n-- Step 1: Aggregate weekly data per country and map country names to market codes\nWITH Aggregated AS (\n    SELECT \n        b.country,\n        -- Map country names to 2-letter market codes\n        CASE b.country \n            WHEN 'Australia' THEN 'AU' WHEN 'Canada' THEN 'CA' WHEN 'Germany' THEN 'DE'\n            WHEN 'Spain' THEN 'ES' WHEN 'France' THEN 'FR' WHEN 'Italy' THEN 'IT'\n            WHEN 'Poland' THEN 'PL' WHEN 'United Kingdom' THEN 'UK' WHEN 'United States' THEN 'US'\n            WHEN 'China' THEN 'CN' WHEN 'Mexico' THEN 'MX' ELSE 'N/A' \n        END AS Market,\n        MIN(b.date) AS FirstDayOfTheWeek, -- Get the earliest date for the week\n        CAST(m.Week_ForForFive AS INT64) AS Week_ForForFive, -- Week identifier\n        AVG(b.queries) AS Sum_BI, -- Average branded queries for the week\n        MAX(m.WeekDay) AS Max_WeekDay, -- Last day of the week\n        AVG(b.queries / b.total_searches) AS avg_share_of_searches -- Average share of branded queries\n    FROM `pandora-dashboard-data.google_offline_data.branded_searches_backfill` b\n    JOIN `pandora-dashboard-data.Master_Date_Table.master_dates` m\n        ON b.date = PARSE_DATE('%Y-%m-%d', m.DW_TS_From) -- Join on date\n    WHERE b.Brand = \"Pandora\" -- Filter for Pandora brand\n    GROUP BY b.country, m.Week_ForForFive\n),\n\n-- Step 2: Calculate rolling averages for the current year (CY)\nCY AS (\n    SELECT \n        Market, \n        Week_ForForFive, \n        Week_ForForFive - 100 AS Week_ForForFive_LY, -- Calculate last year's week\n        Max_WeekDay, \n        FirstDayOfTheWeek, \n        Sum_BI, \n        avg_share_of_searches,\n        -- 4-week rolling average of Sum_BI (current and next 3 weeks)\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_CY,\n        -- 4-week rolling average of avg_share_of_searches\n        AVG(avg_share_of_searches) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_Share_CY,\n        -- 12-week rolling average of Sum_BI\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 11 FOLLOWING) AS Twelve_Week_Avg_CY\n    FROM Aggregated\n),\n\n-- Step 3: Calculate rolling averages for the last year (LY)\nLY AS (\n    SELECT \n        Market, \n        Week_ForForFive, \n        Sum_BI, \n        avg_share_of_searches,\n        -- 4-week rolling average for LY\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_LY,\n        -- 12-week rolling average for LY\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 11 FOLLOWING) AS Twelve_Week_Avg_LY\n    FROM Aggregated\n)\n\n-- Step 4: Join CY and LY, calculate YOY metrics and lagged values\nSELECT \n    cy.Market, \n    cy.Week_ForForFive, \n    cy.Max_WeekDay, \n    FORMAT_DATE('%Y%m%d', cy.FirstDayOfTheWeek) AS DateKey, -- Format date for reporting\n    cy.Sum_BI, \n    cy.avg_share_of_searches, \n    cy.Four_Week_Avg_CY, \n    cy.Four_Week_Avg_Share_CY, \n    cy.Twelve_Week_Avg_CY,\n    ly.Four_Week_Avg_LY, \n    ly.Twelve_Week_Avg_LY, \n    ly.avg_share_of_searches as avg_share_of_searches_ly,\n\n    -- Year-over-year (YOY) comparisons (as percentages)\n    (cy.Four_Week_Avg_CY / NULLIF(ly.Four_Week_Avg_LY, 0)) * 100 AS Four_Week_YOY,\n    (cy.Twelve_Week_Avg_CY / NULLIF(ly.Twelve_Week_Avg_LY, 0)) * 100 AS Twelve_Week_YOY,\n    (cy.Sum_BI / NULLIF(ly.Sum_BI, 0)) * 100 AS YOY,\n\n    -- Lagged YOY values (next weekâ€™s YOY, for trend analysis)\n    LEAD((cy.Four_Week_Avg_CY / NULLIF(ly.Four_Week_Avg_LY, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Four_Week_YOY_lag,\n    LEAD((cy.Twelve_Week_Avg_CY / NULLIF(ly.Twelve_Week_Avg_LY, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Twelve_Week_YOY_lag,\n    LEAD((cy.Sum_BI / NULLIF(ly.Sum_BI, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS YOY_lag,\n\n    -- Lagged values for share of searches and rolling averages\n    LEAD(cy.avg_share_of_searches) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS avg_share_of_searches_CY_lag,\n    LEAD(ly.avg_share_of_searches) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS avg_share_of_searches_LY_lag,\n    LEAD(cy.Four_Week_Avg_Share_CY) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Four_Week_Avg_Share_CY_lag\n\nFROM CY\nLEFT JOIN LY \n    ON cy.Market = ly.Market \n    AND cy.Week_ForForFive_LY = ly.Week_ForForFive -- Join CY with LY by market and week\nORDER BY cy.Market ASC, cy.Week_ForForFive DESC;\n```\n\n\n## Customer Acquisition\n\nWith the integration of Customer Acquisition (CA) into the dashboards, several changes have been made. We now use monthly data for CA reporting.\n\n```sql\nCA_Month_YoY_Simplified = \nVAR CurrentYear = [Current Year Number WA]\nVAR SelectedWeek = SELECTEDVALUE('Date'[Week Number int 2])\n\n-- Step 1: Get the MonthIndex for the selected week\nVAR SelectedMonthIndex =\n    CALCULATE(\n        MAX('Date'[YearMonth445]),\n        ALL('Date'),\n        'Date'[Year] = CurrentYear,\n        'Date'[Week Number int 2] = SelectedWeek\n    )\n\n-- Step 2: Find latest populated MonthIndex from the fact table\nVAR LatestMonthNr = \nCALCULATE(\n    MAX('Customer_Acquisition_Monthly'[MonthYR]),\n    TOPN(\n        2,\n        ALL('Customer_Acquisition_Monthly'),\n        'Customer_Acquisition_Monthly'[Year], DESC,\n        'Customer_Acquisition_Monthly'[Month Nr], DESC\n    )\n)\n-- Step 3: Determine which month to use based on the simplified logic\nVAR UseMonth =\n    IF(\n        SelectedMonthIndex <= LatestMonthNr + 1,\n        SelectedMonthIndex - 1,\n        LatestMonthNr\n    )\n\n\n\n-- Step 5: Get values for CY and LY\nVAR CY_Value =\n    CALCULATE(\n        SUM(Customer_Acquisition_Monthly[NbrCustomers]),\n        Customer_Acquisition_Monthly[MonthYR] = UseMonth\n    )\n\nVAR LY_Value =\n    CALCULATE(\n        SUM(Customer_Acquisition_Monthly[NbrCustomers]),\n        Customer_Acquisition_Monthly[MonthYR] = UseMonth - 100\n    )\n\n-- Step 6: Return YoY %\nRETURN\n    DIVIDE(CY_Value * 100, LY_Value, 0)\n```\n\n### How the \"CA_Month_YOY_Simplified\" Measure Works\n\nThe measure \"CA_Month_YOY_Simplified\" calculates the Year-over-Year (YoY) change in customer acquisition for a selected week. It determines the relevant month based on the selected week and the latest available data, then compares the number of customers acquired in that month for the current year and the previous year.\n\n#### Step-by-Step Logic\n\n1. **Determine the Month for the Selected Week**  \n    The measure identifies which month (using the `YearMonth445` field) the selected week falls into.\n\n2. **Find the Latest Populated Month in the Fact Table**  \n    It checks the fact table to find the most recent month (`MonthYR`) for which customer acquisition data is available (typically the last two months).\n\n3. **Decide Which Month to Use for Reporting**  \n    The measure applies the following logic:\n    - If the selected month index is less than or equal to the latest available month index plus one, use the selected month (or the previous month if the selected week is ahead by one).\n    - If the selected month index is greater than the latest available month index plus one, use the latest available month with data.\n\nThis ensures the measure always uses the most relevant and available month for calculations, even if the selected week is ahead of the latest data.\n\n#### Example Scenarios\n\n| Scenario                                                    | Selected Month Index | Latest Data Month Index | Logic Applied                        | Month Used for CA |\n|:------------------------------------------------------------|:--------------------:|:----------------------:|:--------------------------------------|:-----------------:|\n| 1. User selects 3rd week of July, latest data is June       |          7           |           6            | 7 â‰¤ 6 + 1 â†’ Use previous month: 7 - 1 = 6 |      June        |\n| 2. User selects a week in August, latest data is June       |          8           |           6            | 8 â‰¤ 6 + 1 â†’ False, use latest available month |      June        |\n| 3. User selects 2nd week of February, latest data is June   |          2           |           6            | 2 â‰¤ 6 + 1 â†’ True, use selected month        |   February       |\n\nThis logic ensures that:\n\n- If the user selects a week in a month for which data is not yet available, the measure defaults to the latest available month.\n- If the user selects a week in a month for which data is available, the measure uses that month.\n- If the user selects a week in a past month (for which data is available), the measure uses the selected month.\n\nThis approach guarantees that customer acquisition reporting is always accurate and up-to-date, reflecting the most relevant data available.\n\n\n\n## Total Spend Calculated Column\n\nThe Total Spend calculated column is used in both dashboards (ATR and WMP). It displays either the actual or planned spend for each row, or 0, depending on the contextâ€”specifically, whether actual or planned spend should be shown. This is necessary because the GMT table contains both planned and actual spend values in the same table.\n\nUsing a calculated column instead of a measure provides greater consistency and flexibility: the result is always the same for each row, regardless of any filters applied in visuals. In contrast, a measure could change its value depending on the filters, which may not be desirable for reporting purposes.\n\n## The Index Logic to allow for dynamic year changes\n\nTo support dynamic year changes and accurate time-based calculations, we have implemented an index logic in the master date table. Each unique combination of week and year is assigned a sequential index (e.g., `WeekIndex`). This index is referenced in measures and calculations, enabling dashboards to seamlessly handle week-over-week or year-over-year comparisonsâ€”even when weeks span across different years.\n\n### Why Use an Index?\n\nWhen calculating rolling averages (such as 4-week or 12-week averages), simply subtracting a fixed number from the selected week number does not work if the calculation crosses a year boundary. The index solves this by providing a continuous sequence across years.\n\n### How It Works\n\n- The master date table contains a column (e.g., `WeekIndex`) that uniquely identifies each week, incrementing across years.\n- Measures use the selected weekâ€™s index to determine the correct range for calculations.\n- For example, to calculate a 4-week average, the measure filters data where `WeekIndex` is between the selected index and (selected index - 3), regardless of year.\n\nThis approach ensures that time-based calculations remain accurate and robust, even as users select weeks from different years.\n\n**Example:**\n\nSuppose a user selects the first week of a new year. The index logic allows the measure to include the last weeks of the previous year in rolling calculations, ensuring continuity and correctness.\n\nThis method is essential for scenarios where rolling averages or comparisons span multiple years, providing consistent and reliable results in your dashboards.\n\n## Integrating Asana into Power BI\n\nYou can connect Asana to Power BI to automatically import and visualize project tasks.\n\n### How to Connect Asana as a Data Source\n\n1. In Power BI Desktop, click **Home > Get Data > More...**.\n2. Search for \"Asana\" and select it as a data source.\n3. Paste the link to the specific Asana project you want to connect to.\n4. Follow the prompts to authenticate and load your data.\n\n### Managing Tasks for Power BI Dashboards\n\n- To include a new task in your dashboard, simply create it in Asana and apply the appropriate tag.\n- The following tags are used to categorize tasks:\n    - `Patch Notes ATR`\n    - `Patch Notes WMP`\n    - `Refresh`\n- Use the \"Patch Notes\" tags for patch note items and the \"Refresh\" tag for refresh-related tasks.\n\nThe Power BI setup is configured to automatically fetch all tasks with these tags, ensuring your dashboards are always up to date with the latest relevant items from Asana.\n\n\n\n","srcMarkdownNoYaml":"\nThis section outlines some some features i have created and it is useful to have some documentation for them.\n\n## BrandInterest & Category Interest in BigQuery and PowerBI\n\nTo enhance performance and reliability, both BrandInterest and Category Interest calculations are now performed in BigQuery.\n\n### BrandInterest in BigQuery\n\nThere are two main views for BrandInterest in BigQuery:\n\n- **BrandInterestAGG**: The primary view containing all key metrics for all markets across the full date range.\n- **BrandInterestAGG_2**: A fallback view that always contains the latest complete week for each market (one row per market). This ensures that if a user selects a week with incomplete data, the dashboard will automatically display the latest available complete week for each market. If the selected week has complete data, the dashboard will show that week as expected. This approach avoids complex workarounds or heavy computations in PowerBI and ensures users always see the most relevant and complete data.\n\nThe same approach is applied to CategoryInterest data.\n\n- [BrandInterestAGG View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m5!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG&pli=1&inv=1&invt=Ab09Vg)\n- [BrandInterestAGG_2 View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG_2&pli=1&inv=1&invt=Ab09Vg&chat=true)\n- [CategoryInterestAGG View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sCategoryInterestAGG&pli=1&inv=1&invt=Ab09Vg&chat=true)\n- [CategoryInterestAGG_2 View](https://console.cloud.google.com/bigquery?project=pandora-dashboard-data&ws=!1m10!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sBrandInterestAGG!1m4!4m3!1spandora-dashboard-data!2sgoogle_offline_data!3sCategoryInterestAGG_2&pli=1&inv=1&invt=Ab09Vg&chat=true)\n\nThese views are connected to PowerBI, allowing you to use simple measures directly in your visuals. The tables are linked to the master dates table using `Week_ForForFive` and to the market dimension using the market key.\n\nBelow is the SQL query for the **BrandInterestAGG** view, with explanations:\n\n\n```sql\n-- Step 1: Aggregate weekly data per country and map country names to market codes\nWITH Aggregated AS (\n    SELECT \n        b.country,\n        -- Map country names to 2-letter market codes\n        CASE b.country \n            WHEN 'Australia' THEN 'AU' WHEN 'Canada' THEN 'CA' WHEN 'Germany' THEN 'DE'\n            WHEN 'Spain' THEN 'ES' WHEN 'France' THEN 'FR' WHEN 'Italy' THEN 'IT'\n            WHEN 'Poland' THEN 'PL' WHEN 'United Kingdom' THEN 'UK' WHEN 'United States' THEN 'US'\n            WHEN 'China' THEN 'CN' WHEN 'Mexico' THEN 'MX' ELSE 'N/A' \n        END AS Market,\n        MIN(b.date) AS FirstDayOfTheWeek, -- Get the earliest date for the week\n        CAST(m.Week_ForForFive AS INT64) AS Week_ForForFive, -- Week identifier\n        AVG(b.queries) AS Sum_BI, -- Average branded queries for the week\n        MAX(m.WeekDay) AS Max_WeekDay, -- Last day of the week\n        AVG(b.queries / b.total_searches) AS avg_share_of_searches -- Average share of branded queries\n    FROM `pandora-dashboard-data.google_offline_data.branded_searches_backfill` b\n    JOIN `pandora-dashboard-data.Master_Date_Table.master_dates` m\n        ON b.date = PARSE_DATE('%Y-%m-%d', m.DW_TS_From) -- Join on date\n    WHERE b.Brand = \"Pandora\" -- Filter for Pandora brand\n    GROUP BY b.country, m.Week_ForForFive\n),\n\n-- Step 2: Calculate rolling averages for the current year (CY)\nCY AS (\n    SELECT \n        Market, \n        Week_ForForFive, \n        Week_ForForFive - 100 AS Week_ForForFive_LY, -- Calculate last year's week\n        Max_WeekDay, \n        FirstDayOfTheWeek, \n        Sum_BI, \n        avg_share_of_searches,\n        -- 4-week rolling average of Sum_BI (current and next 3 weeks)\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_CY,\n        -- 4-week rolling average of avg_share_of_searches\n        AVG(avg_share_of_searches) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_Share_CY,\n        -- 12-week rolling average of Sum_BI\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 11 FOLLOWING) AS Twelve_Week_Avg_CY\n    FROM Aggregated\n),\n\n-- Step 3: Calculate rolling averages for the last year (LY)\nLY AS (\n    SELECT \n        Market, \n        Week_ForForFive, \n        Sum_BI, \n        avg_share_of_searches,\n        -- 4-week rolling average for LY\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS Four_Week_Avg_LY,\n        -- 12-week rolling average for LY\n        AVG(Sum_BI) OVER (PARTITION BY Market ORDER BY Week_ForForFive DESC ROWS BETWEEN CURRENT ROW AND 11 FOLLOWING) AS Twelve_Week_Avg_LY\n    FROM Aggregated\n)\n\n-- Step 4: Join CY and LY, calculate YOY metrics and lagged values\nSELECT \n    cy.Market, \n    cy.Week_ForForFive, \n    cy.Max_WeekDay, \n    FORMAT_DATE('%Y%m%d', cy.FirstDayOfTheWeek) AS DateKey, -- Format date for reporting\n    cy.Sum_BI, \n    cy.avg_share_of_searches, \n    cy.Four_Week_Avg_CY, \n    cy.Four_Week_Avg_Share_CY, \n    cy.Twelve_Week_Avg_CY,\n    ly.Four_Week_Avg_LY, \n    ly.Twelve_Week_Avg_LY, \n    ly.avg_share_of_searches as avg_share_of_searches_ly,\n\n    -- Year-over-year (YOY) comparisons (as percentages)\n    (cy.Four_Week_Avg_CY / NULLIF(ly.Four_Week_Avg_LY, 0)) * 100 AS Four_Week_YOY,\n    (cy.Twelve_Week_Avg_CY / NULLIF(ly.Twelve_Week_Avg_LY, 0)) * 100 AS Twelve_Week_YOY,\n    (cy.Sum_BI / NULLIF(ly.Sum_BI, 0)) * 100 AS YOY,\n\n    -- Lagged YOY values (next weekâ€™s YOY, for trend analysis)\n    LEAD((cy.Four_Week_Avg_CY / NULLIF(ly.Four_Week_Avg_LY, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Four_Week_YOY_lag,\n    LEAD((cy.Twelve_Week_Avg_CY / NULLIF(ly.Twelve_Week_Avg_LY, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Twelve_Week_YOY_lag,\n    LEAD((cy.Sum_BI / NULLIF(ly.Sum_BI, 0)) * 100) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS YOY_lag,\n\n    -- Lagged values for share of searches and rolling averages\n    LEAD(cy.avg_share_of_searches) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS avg_share_of_searches_CY_lag,\n    LEAD(ly.avg_share_of_searches) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS avg_share_of_searches_LY_lag,\n    LEAD(cy.Four_Week_Avg_Share_CY) OVER (PARTITION BY cy.Market ORDER BY cy.Week_ForForFive DESC) AS Four_Week_Avg_Share_CY_lag\n\nFROM CY\nLEFT JOIN LY \n    ON cy.Market = ly.Market \n    AND cy.Week_ForForFive_LY = ly.Week_ForForFive -- Join CY with LY by market and week\nORDER BY cy.Market ASC, cy.Week_ForForFive DESC;\n```\n\n\n## Customer Acquisition\n\nWith the integration of Customer Acquisition (CA) into the dashboards, several changes have been made. We now use monthly data for CA reporting.\n\n```sql\nCA_Month_YoY_Simplified = \nVAR CurrentYear = [Current Year Number WA]\nVAR SelectedWeek = SELECTEDVALUE('Date'[Week Number int 2])\n\n-- Step 1: Get the MonthIndex for the selected week\nVAR SelectedMonthIndex =\n    CALCULATE(\n        MAX('Date'[YearMonth445]),\n        ALL('Date'),\n        'Date'[Year] = CurrentYear,\n        'Date'[Week Number int 2] = SelectedWeek\n    )\n\n-- Step 2: Find latest populated MonthIndex from the fact table\nVAR LatestMonthNr = \nCALCULATE(\n    MAX('Customer_Acquisition_Monthly'[MonthYR]),\n    TOPN(\n        2,\n        ALL('Customer_Acquisition_Monthly'),\n        'Customer_Acquisition_Monthly'[Year], DESC,\n        'Customer_Acquisition_Monthly'[Month Nr], DESC\n    )\n)\n-- Step 3: Determine which month to use based on the simplified logic\nVAR UseMonth =\n    IF(\n        SelectedMonthIndex <= LatestMonthNr + 1,\n        SelectedMonthIndex - 1,\n        LatestMonthNr\n    )\n\n\n\n-- Step 5: Get values for CY and LY\nVAR CY_Value =\n    CALCULATE(\n        SUM(Customer_Acquisition_Monthly[NbrCustomers]),\n        Customer_Acquisition_Monthly[MonthYR] = UseMonth\n    )\n\nVAR LY_Value =\n    CALCULATE(\n        SUM(Customer_Acquisition_Monthly[NbrCustomers]),\n        Customer_Acquisition_Monthly[MonthYR] = UseMonth - 100\n    )\n\n-- Step 6: Return YoY %\nRETURN\n    DIVIDE(CY_Value * 100, LY_Value, 0)\n```\n\n### How the \"CA_Month_YOY_Simplified\" Measure Works\n\nThe measure \"CA_Month_YOY_Simplified\" calculates the Year-over-Year (YoY) change in customer acquisition for a selected week. It determines the relevant month based on the selected week and the latest available data, then compares the number of customers acquired in that month for the current year and the previous year.\n\n#### Step-by-Step Logic\n\n1. **Determine the Month for the Selected Week**  \n    The measure identifies which month (using the `YearMonth445` field) the selected week falls into.\n\n2. **Find the Latest Populated Month in the Fact Table**  \n    It checks the fact table to find the most recent month (`MonthYR`) for which customer acquisition data is available (typically the last two months).\n\n3. **Decide Which Month to Use for Reporting**  \n    The measure applies the following logic:\n    - If the selected month index is less than or equal to the latest available month index plus one, use the selected month (or the previous month if the selected week is ahead by one).\n    - If the selected month index is greater than the latest available month index plus one, use the latest available month with data.\n\nThis ensures the measure always uses the most relevant and available month for calculations, even if the selected week is ahead of the latest data.\n\n#### Example Scenarios\n\n| Scenario                                                    | Selected Month Index | Latest Data Month Index | Logic Applied                        | Month Used for CA |\n|:------------------------------------------------------------|:--------------------:|:----------------------:|:--------------------------------------|:-----------------:|\n| 1. User selects 3rd week of July, latest data is June       |          7           |           6            | 7 â‰¤ 6 + 1 â†’ Use previous month: 7 - 1 = 6 |      June        |\n| 2. User selects a week in August, latest data is June       |          8           |           6            | 8 â‰¤ 6 + 1 â†’ False, use latest available month |      June        |\n| 3. User selects 2nd week of February, latest data is June   |          2           |           6            | 2 â‰¤ 6 + 1 â†’ True, use selected month        |   February       |\n\nThis logic ensures that:\n\n- If the user selects a week in a month for which data is not yet available, the measure defaults to the latest available month.\n- If the user selects a week in a month for which data is available, the measure uses that month.\n- If the user selects a week in a past month (for which data is available), the measure uses the selected month.\n\nThis approach guarantees that customer acquisition reporting is always accurate and up-to-date, reflecting the most relevant data available.\n\n\n\n## Total Spend Calculated Column\n\nThe Total Spend calculated column is used in both dashboards (ATR and WMP). It displays either the actual or planned spend for each row, or 0, depending on the contextâ€”specifically, whether actual or planned spend should be shown. This is necessary because the GMT table contains both planned and actual spend values in the same table.\n\nUsing a calculated column instead of a measure provides greater consistency and flexibility: the result is always the same for each row, regardless of any filters applied in visuals. In contrast, a measure could change its value depending on the filters, which may not be desirable for reporting purposes.\n\n## The Index Logic to allow for dynamic year changes\n\nTo support dynamic year changes and accurate time-based calculations, we have implemented an index logic in the master date table. Each unique combination of week and year is assigned a sequential index (e.g., `WeekIndex`). This index is referenced in measures and calculations, enabling dashboards to seamlessly handle week-over-week or year-over-year comparisonsâ€”even when weeks span across different years.\n\n### Why Use an Index?\n\nWhen calculating rolling averages (such as 4-week or 12-week averages), simply subtracting a fixed number from the selected week number does not work if the calculation crosses a year boundary. The index solves this by providing a continuous sequence across years.\n\n### How It Works\n\n- The master date table contains a column (e.g., `WeekIndex`) that uniquely identifies each week, incrementing across years.\n- Measures use the selected weekâ€™s index to determine the correct range for calculations.\n- For example, to calculate a 4-week average, the measure filters data where `WeekIndex` is between the selected index and (selected index - 3), regardless of year.\n\nThis approach ensures that time-based calculations remain accurate and robust, even as users select weeks from different years.\n\n**Example:**\n\nSuppose a user selects the first week of a new year. The index logic allows the measure to include the last weeks of the previous year in rolling calculations, ensuring continuity and correctness.\n\nThis method is essential for scenarios where rolling averages or comparisons span multiple years, providing consistent and reliable results in your dashboards.\n\n## Integrating Asana into Power BI\n\nYou can connect Asana to Power BI to automatically import and visualize project tasks.\n\n### How to Connect Asana as a Data Source\n\n1. In Power BI Desktop, click **Home > Get Data > More...**.\n2. Search for \"Asana\" and select it as a data source.\n3. Paste the link to the specific Asana project you want to connect to.\n4. Follow the prompts to authenticate and load your data.\n\n### Managing Tasks for Power BI Dashboards\n\n- To include a new task in your dashboard, simply create it in Asana and apply the appropriate tag.\n- The following tags are used to categorize tasks:\n    - `Patch Notes ATR`\n    - `Patch Notes WMP`\n    - `Refresh`\n- Use the \"Patch Notes\" tags for patch note items and the \"Refresh\" tag for refresh-related tasks.\n\nThe Power BI setup is configured to automatically fetch all tasks with these tags, ensuring your dashboards are always up to date with the latest relevant items from Asana.\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"measures.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["default","styles.scss"],"title":"Measures"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}